//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Hexalem.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> HexalemModuleStorage
    /// </summary>
    public sealed class HexalemModuleStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> HexalemModuleStorage Constructor
        /// </summary>
        public HexalemModuleStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("HexalemModule", "StoreTest"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8), typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("HexalemModule", "GameStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8), typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.game.Game)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("HexalemModule", "MatchmakingStateStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.EnumMatchmakingState)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("HexalemModule", "HexBoardStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.HexBoard)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("HexalemModule", "TargetGoalStorage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr16U8)));
        }
        
        /// <summary>
        /// >> StoreTestParams
        /// </summary>
        public static string StoreTestParams(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8 key)
        {
            return RequestGenerator.GetStorage("HexalemModule", "StoreTest", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> StoreTestDefault
        /// Default value as hex string
        /// </summary>
        public static string StoreTestDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> StoreTest
        /// </summary>
        public async Task<Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1> StoreTest(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8 key, string blockhash, CancellationToken token)
        {
            string parameters = HexalemModuleStorage.StoreTestParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hexalem.NET.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GameStorageParams
        /// </summary>
        public static string GameStorageParams(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8 key)
        {
            return RequestGenerator.GetStorage("HexalemModule", "GameStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GameStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string GameStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GameStorage
        /// </summary>
        public async Task<Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.game.Game> GameStorage(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8 key, string blockhash, CancellationToken token)
        {
            string parameters = HexalemModuleStorage.GameStorageParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.game.Game>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MatchmakingStateStorageParams
        /// </summary>
        public static string MatchmakingStateStorageParams(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("HexalemModule", "MatchmakingStateStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MatchmakingStateStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string MatchmakingStateStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MatchmakingStateStorage
        /// </summary>
        public async Task<Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.EnumMatchmakingState> MatchmakingStateStorage(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = HexalemModuleStorage.MatchmakingStateStorageParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.EnumMatchmakingState>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HexBoardStorageParams
        /// </summary>
        public static string HexBoardStorageParams(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("HexalemModule", "HexBoardStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HexBoardStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string HexBoardStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HexBoardStorage
        /// </summary>
        public async Task<Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.HexBoard> HexBoardStorage(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = HexalemModuleStorage.HexBoardStorageParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.HexBoard>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> TargetGoalStorageParams
        /// </summary>
        public static string TargetGoalStorageParams(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("HexalemModule", "TargetGoalStorage", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> TargetGoalStorageDefault
        /// Default value as hex string
        /// </summary>
        public static string TargetGoalStorageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> TargetGoalStorage
        /// </summary>
        public async Task<Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr16U8> TargetGoalStorage(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = HexalemModuleStorage.TargetGoalStorageParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr16U8>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> HexalemModuleCalls
    /// </summary>
    public sealed class HexalemModuleCalls
    {
        
        /// <summary>
        /// >> create_game
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateGame(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> players, Substrate.NetApi.Model.Types.Primitive.U8 grid_size)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(players.Encode());
            byteArray.AddRange(grid_size.Encode());
            return new Method(21, "HexalemModule", 0, "create_game", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> queue
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Queue()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "HexalemModule", 100, "queue", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> accept_match
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method AcceptMatch()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "HexalemModule", 101, "accept_match", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_accept_match
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceAcceptMatch()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "HexalemModule", 102, "force_accept_match", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> play
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Play(Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.resource.Move move_played)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(move_played.Encode());
            return new Method(21, "HexalemModule", 1, "play", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upgrade
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Upgrade(Substrate.NetApi.Model.Types.Primitive.U8 place_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(place_index.Encode());
            return new Method(21, "HexalemModule", 2, "upgrade", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> finish_turn
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method FinishTurn()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "HexalemModule", 3, "finish_turn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_finish_turn
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceFinishTurn(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8 game_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_id.Encode());
            return new Method(21, "HexalemModule", 4, "force_finish_turn", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_rewards
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimRewards()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(21, "HexalemModule", 5, "claim_rewards", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> root_delete_game
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RootDeleteGame(Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr32U8 game_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(game_id.Encode());
            return new Method(21, "HexalemModule", 6, "root_delete_game", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> HexalemModuleConstants
    /// </summary>
    public sealed class HexalemModuleConstants
    {
        
        /// <summary>
        /// >> MaxPlayers
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxPlayers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MinPlayers
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 MinPlayers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x01");
            return result;
        }
        
        /// <summary>
        /// >> MaxRounds
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 MaxRounds()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x19");
            return result;
        }
        
        /// <summary>
        /// >> BlocksToPlayLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 BlocksToPlayLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
        
        /// <summary>
        /// >> BlocksToAcceptMatchLimit
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 BlocksToAcceptMatchLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x05");
            return result;
        }
        
        /// <summary>
        /// >> BlocksToClaimCooldown
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 BlocksToClaimCooldown()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
        
        /// <summary>
        /// >> MaxHexGridSize
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxHexGridSize()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x31000000");
            return result;
        }
        
        /// <summary>
        /// >> MaxTileSelection
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MaxTileSelection()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x10000000");
            return result;
        }
        
        /// <summary>
        /// >> MatchmakingPeriod
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 MatchmakingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x0A000000");
            return result;
        }
        
        /// <summary>
        /// >> TileCosts
        /// </summary>
        public Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.Arr15TileCost TileCosts()
        {
            var result = new Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.Arr15TileCost();
            result.Create("0x1000011000011000011800011800011800012000012000012000012800012800012800013000013" +
                    "80001380001");
            return result;
        }
        
        /// <summary>
        /// >> TileResourceProductions
        /// </summary>
        public Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.resource.Arr8ResourceProductions TileResourceProductions()
        {
            var result = new Substrate.Hexalem.NET.NetApiExt.Generated.Model.pallet_hexalem.types.board.resource.Arr8ResourceProductions();
            result.Create("0x0000000000000000000000000000000100000000000000000000000000000002000000000000000" +
                    "00000000002000000000000000000000000000000000400000000000004000000000103000000000" +
                    "00002000000000000000000000000000000000000000000020100000000000203");
            return result;
        }
        
        /// <summary>
        /// >> WaterPerHuman
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 WaterPerHuman()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x02");
            return result;
        }
        
        /// <summary>
        /// >> FoodPerHuman
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 FoodPerHuman()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x01");
            return result;
        }
        
        /// <summary>
        /// >> HomePerHumans
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 HomePerHumans()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x03");
            return result;
        }
        
        /// <summary>
        /// >> FoodPerTree
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 FoodPerTree()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x01");
            return result;
        }
        
        /// <summary>
        /// >> DefaultPlayerResources
        /// </summary>
        public Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr7U8 DefaultPlayerResources()
        {
            var result = new Substrate.Hexalem.NET.NetApiExt.Generated.Types.Base.Arr7U8();
            result.Create("0x01010000000000");
            return result;
        }
        
        /// <summary>
        /// >> TargetGoalGold
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 TargetGoalGold()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x0A");
            return result;
        }
        
        /// <summary>
        /// >> TargetGoalHuman
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 TargetGoalHuman()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x07");
            return result;
        }
    }
    
    /// <summary>
    /// >> HexalemModuleErrors
    /// </summary>
    public enum HexalemModuleErrors
    {
        
        /// <summary>
        /// >> AlreadyPlaying
        /// </summary>
        AlreadyPlaying,
        
        /// <summary>
        /// >> GameNotInitialized
        /// </summary>
        GameNotInitialized,
        
        /// <summary>
        /// >> DidNotJoinGame
        /// </summary>
        DidNotJoinGame,
        
        /// <summary>
        /// >> HexBoardNotInitialized
        /// </summary>
        HexBoardNotInitialized,
        
        /// <summary>
        /// >> HexBoardAlreadyInitialized
        /// </summary>
        HexBoardAlreadyInitialized,
        
        /// <summary>
        /// >> GameNotInFinishedState
        /// </summary>
        GameNotInFinishedState,
        
        /// <summary>
        /// >> CreatorNotInPlayersAtIndexZero
        /// </summary>
        CreatorNotInPlayersAtIndexZero,
        
        /// <summary>
        /// >> GameAlreadyCreated
        /// </summary>
        GameAlreadyCreated,
        
        /// <summary>
        /// >> InternalError
        /// </summary>
        InternalError,
        
        /// <summary>
        /// >> NumberOfPlayersIsTooSmall
        /// </summary>
        NumberOfPlayersIsTooSmall,
        
        /// <summary>
        /// >> NumberOfPlayersIsTooLarge
        /// </summary>
        NumberOfPlayersIsTooLarge,
        
        /// <summary>
        /// >> MathOverflow
        /// </summary>
        MathOverflow,
        
        /// <summary>
        /// >> NotEnoughResources
        /// </summary>
        NotEnoughResources,
        
        /// <summary>
        /// >> NotEnoughPopulation
        /// </summary>
        NotEnoughPopulation,
        
        /// <summary>
        /// >> BuyIndexOutOfBounds
        /// </summary>
        BuyIndexOutOfBounds,
        
        /// <summary>
        /// >> PlaceIndexOutOfBounds
        /// </summary>
        PlaceIndexOutOfBounds,
        
        /// <summary>
        /// >> PlayerNotOnTurn
        /// </summary>
        PlayerNotOnTurn,
        
        /// <summary>
        /// >> PlayerNotInGame
        /// </summary>
        PlayerNotInGame,
        
        /// <summary>
        /// >> CurrentPlayerCannotForceFinishTurn
        /// </summary>
        CurrentPlayerCannotForceFinishTurn,
        
        /// <summary>
        /// >> GameNotInPlayingState
        /// </summary>
        GameNotInPlayingState,
        
        /// <summary>
        /// >> GameNotInAcceptingState
        /// </summary>
        GameNotInAcceptingState,
        
        /// <summary>
        /// >> BadGridSize
        /// </summary>
        BadGridSize,
        
        /// <summary>
        /// >> TileIsNotEmpty
        /// </summary>
        TileIsNotEmpty,
        
        /// <summary>
        /// >> TileOnMaxLevel
        /// </summary>
        TileOnMaxLevel,
        
        /// <summary>
        /// >> CannotLevelUpEmptyTile
        /// </summary>
        CannotLevelUpEmptyTile,
        
        /// <summary>
        /// >> CannotLevelUp
        /// </summary>
        CannotLevelUp,
        
        /// <summary>
        /// >> TileSurroundedByEmptyTiles
        /// </summary>
        TileSurroundedByEmptyTiles,
        
        /// <summary>
        /// >> BlocksToPlayLimitNotPassed
        /// </summary>
        BlocksToPlayLimitNotPassed,
        
        /// <summary>
        /// >> BlocksToAcceptMatchLimitNotPassed
        /// </summary>
        BlocksToAcceptMatchLimitNotPassed,
        
        /// <summary>
        /// >> ClaimCooldownNotPassed
        /// </summary>
        ClaimCooldownNotPassed,
    }
}
