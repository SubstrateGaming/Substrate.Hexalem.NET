//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Hexalem.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> MatchmakerModuleStorage
    /// </summary>
    public sealed class MatchmakerModuleStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> MatchmakerModuleStorage Constructor
        /// </summary>
        public MatchmakerModuleStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MatchmakerModule", "BracketsCount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U8)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MatchmakerModule", "BracketIndices"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U8), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U16>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MatchmakerModule", "BracketIndexKeyMap"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U16>), typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("MatchmakerModule", "KeyPresentMap"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
        }
        
        /// <summary>
        /// >> BracketsCountParams
        /// </summary>
        public static string BracketsCountParams()
        {
            return RequestGenerator.GetStorage("MatchmakerModule", "BracketsCount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BracketsCountDefault
        /// Default value as hex string
        /// </summary>
        public static string BracketsCountDefault()
        {
            return "0x02";
        }
        
        /// <summary>
        /// >> BracketsCount
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U8> BracketsCount(string blockhash, CancellationToken token)
        {
            string parameters = MatchmakerModuleStorage.BracketsCountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U8>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BracketIndicesParams
        /// </summary>
        public static string BracketIndicesParams(Substrate.NetApi.Model.Types.Primitive.U8 key)
        {
            return RequestGenerator.GetStorage("MatchmakerModule", "BracketIndices", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BracketIndicesDefault
        /// Default value as hex string
        /// </summary>
        public static string BracketIndicesDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> BracketIndices
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U16>> BracketIndices(Substrate.NetApi.Model.Types.Primitive.U8 key, string blockhash, CancellationToken token)
        {
            string parameters = MatchmakerModuleStorage.BracketIndicesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U16>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BracketIndexKeyMapParams
        /// </summary>
        public static string BracketIndexKeyMapParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U16> key)
        {
            return RequestGenerator.GetStorage("MatchmakerModule", "BracketIndexKeyMap", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> BracketIndexKeyMapDefault
        /// Default value as hex string
        /// </summary>
        public static string BracketIndexKeyMapDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BracketIndexKeyMap
        /// </summary>
        public async Task<Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> BracketIndexKeyMap(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U8, Substrate.NetApi.Model.Types.Primitive.U16> key, string blockhash, CancellationToken token)
        {
            string parameters = MatchmakerModuleStorage.BracketIndexKeyMapParams(key);
            var result = await _client.GetStorageAsync<Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeyPresentMapParams
        /// </summary>
        public static string KeyPresentMapParams(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("MatchmakerModule", "KeyPresentMap", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> KeyPresentMapDefault
        /// Default value as hex string
        /// </summary>
        public static string KeyPresentMapDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> KeyPresentMap
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> KeyPresentMap(Substrate.Hexalem.NET.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = MatchmakerModuleStorage.KeyPresentMapParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> MatchmakerModuleCalls
    /// </summary>
    public sealed class MatchmakerModuleCalls
    {
    }
    
    /// <summary>
    /// >> MatchmakerModuleConstants
    /// </summary>
    public sealed class MatchmakerModuleConstants
    {
        
        /// <summary>
        /// >> AmountPlayers
        ///  Constant that indicates how many players are needed to create a new match.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 AmountPlayers()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x02");
            return result;
        }
        
        /// <summary>
        /// >> AmountBrackets
        ///  Constant that indicates how many ranking brackets exist for players.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U8 AmountBrackets()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U8();
            result.Create("0x02");
            return result;
        }
    }
    
    /// <summary>
    /// >> MatchmakerModuleErrors
    /// </summary>
    public enum MatchmakerModuleErrors
    {
        
        /// <summary>
        /// >> AlreadyQueued
        /// Player has already queued, can not queue twice
        /// </summary>
        AlreadyQueued,
    }
}
